
내장 객체 (standard built-in objects)
: JavaScript가 미리 가지고 있는 객체

// Date (날짜)
let myDate = new Date ();
console.log (myDate);

// 출력값
이 객체를 생성한 순간의 시간
(요일, 월, 일, 연도, 시간, 시간대순)


// 원하는 날짜 생성
new Date (특정한 값);

// new Date (milliseconds) -숫자값
let myDate = new Date (1000);

: UTC 기준 1970년 1월 1일 0시 0분 0초에서
넣어준 숫자 값의 밀리초만큼 지난 객체를 만듦

* 밀리초 : 1초를 1000으로 나눈 단위


// new Date ('YYYY-MM-DD') -문자열
let myDate = new Date ('2022-11-05');

: 날짜로 해석이 가능한 문자열을 넣어주면
해당 날짜의 객체를 만들 수 있음

// new Date ('YYYY-MM-DDThh:mm:ss') -문자열2
let myDate = new Date ('2022-11-05T01:19:16');

: 24시간 표기 형태로 시간대 작성

// 출력값
- 시간을 따로 정해주지 않은 경우 : 자정을 기준으로  
- 시간을 지정해준 경우 : 해당 시간에 맞게


// new Date (값, 값, 값 ...) - 여러개의 값을 전달
new Date (YYYY, MM, DD, hh, mm, ss, ms);

* 연도와 월까지는 필수, 나머지는 생략 가능

** month의 경우만 시작 숫자가 0
우리가 일반적으로 생각하는 1월 = 컴퓨터에게 0월


// Date.getTime ()
let myDate = new Date (2022, 11, 05, 01, 26, 16);

console.log (myDate.getTime());

* time stamp
: 1970년 1월 1일 0시 0분 0초(Date 객체의 기준 날짜)에 맞춰서
  몇 밀리초가 지났는지 계산해줌


// Date.getTime ()
let myDate = new Date (2017, 04, 18, 19, 11, 16);
let today = new Date ();

let timeDiff = myDate.getTime () - today.getTime ();

console.log (timeDiff + '밀리초');
console.log (timeDiff / 1000 / 60 + '초');
console.log (timeDiff / 1000 / 60 + '분');
console.log (timeDiff / 1000 / 60 / 60 + '시간');


// Date.getTime ()
let myDate = new Date (2017, 04, 18, 19, 11, 16);

console.log (myDate.getFullYear());
console.log (myDate.getMonth());
console.log (myDate.getDate());  // Date -일자
console.log (myDate.getDay());  // Day -요일
console.log (myDate.getHour());
console.log (myDate.getMinutes());
console.log (myDate.getSeconds());
console.log (myDate.getMilliseconds());

* 요일 (일요일부터 0~6까지)