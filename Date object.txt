
내장 객체 (standard built-in objects)
: JavaScript가 미리 가지고 있는 객체

// Date (날짜)
let myDate = new Date ();
console.log (myDate);

// 출력값
이 객체를 생성한 순간의 시간
(요일, 월, 일, 연도, 시간, 시간대순)


// 원하는 날짜 생성
new Date (특정한 값);

// new Date (milliseconds) -숫자값
let myDate = new Date (1000);

: UTC 기준 1970년 1월 1일 0시 0분 0초에서
넣어준 숫자 값의 밀리초만큼 지난 객체를 만듦

* 밀리초 : 1초를 1000으로 나눈 단위


// new Date ('YYYY-MM-DD') -문자열
let myDate = new Date ('2022-11-05');

: 날짜로 해석이 가능한 문자열을 넣어주면
해당 날짜의 객체를 만들 수 있음

// new Date ('YYYY-MM-DDThh:mm:ss') -문자열2
let myDate = new Date ('2022-11-05T01:19:16');

: 24시간 표기 형태로 시간대 작성

// 출력값
- 시간을 따로 정해주지 않은 경우 : 자정을 기준으로  
- 시간을 지정해준 경우 : 해당 시간에 맞게


// new Date (값, 값, 값 ...) - 여러개의 값을 전달
new Date (YYYY, MM, DD, hh, mm, ss, ms);

* 연도와 월까지는 필수, 나머지는 생략 가능

** month의 경우만 시작 숫자가 0
우리가 일반적으로 생각하는 1월 = 컴퓨터에게 0월


// Date.getTime ()
let myDate = new Date (2022, 11, 05, 01, 26, 16);

console.log (myDate.getTime());

* time stamp
: 1970년 1월 1일 0시 0분 0초(Date 객체의 기준 날짜)에 맞춰서
  몇 밀리초가 지났는지 계산해줌


// Date.getTime ()
let myDate = new Date (2017, 04, 18, 19, 11, 16);
let today = new Date ();

let timeDiff = myDate.getTime () - today.getTime ();

console.log (timeDiff + '밀리초');
console.log (timeDiff / 1000 + '초');
console.log (timeDiff / 1000 / 60 + '분');
console.log (timeDiff / 1000 / 60 / 60 + '시간');


// Date.getTime ()
let myDate = new Date (2017, 04, 18, 19, 11, 16);

console.log (myDate.getFullYear());
console.log (myDate.getMonth());
console.log (myDate.getDate());  // Date -일자
console.log (myDate.getDay());  // Day -요일
console.log (myDate.getHour());
console.log (myDate.getMinutes());
console.log (myDate.getSeconds());
console.log (myDate.getMilliseconds());

* 요일 (일요일부터 0~6까지)


// Date 객체 정보 수정
: set로 시작하는 다양한 메서드를 활용하면,
  생성된 Date객체의 정보를 수정할 수 있음

let myDate = new Date(2017, 4, 18, 19, 11, 16);

myDate.setFullYear(2002);
myDate.setMonth(6);
myDate.setDate(20);

/* 대괄호로 감싸진 요소들은 선택적인 요소

setFullYear(year, [month], [date])
setMonth(month, [date])
setDate(date)
setHours(hour, [min], [sec], [ms])
setMinutes(min, [sec], [ms])
setSeconds(sec, [ms])
setMilliseconds(ms)
setTime(milliseconds)
ㄴ(1970년 1월 1일 00:00:00 UTC부터 밀리초 이후를 나타내는 날짜 설정) */


// 간단하게 시간 정보 확인
let myDate = new Date();

console.log(myDate.toLocaleDateString());
// myDate가 가진 날짜에 대한 정보 (년. 월. 일)
console.log(myDate.toLocaleTimeString());
// myDate가 가진 시간에 대한 정보 (시:분:초)
console.log(myDate.toLocaleString());
// myDate가 가진 날짜와 시간에 대한 정보 (년. 월. 일 시:분:초)

/* toLocaleDateString(),
toLocaleTimeString(),
toLocaleString() 메소드는
사용자의 브라우저에 설정된 국가의 표기에 맞춰 날짜와 시간을 보여줌 */


// 자동으로 날짜를 수정해주는 유용한 기능
: 범위를 벗어나는 값을 설정하려고 하면 자동으로 날짜를 수정

let myDate = new Date(1988, 0, 32); // 1988년 1월 32일은 없음

// 2월 1일로 자동고침 되는걸 확인할 수 있음
console.log(myDate) // Mon Feb 01 1988 00:00:00


// Date.now()
: 이 메소드가 호출된 시점의 타임스탬프를 반환
  이렇게 하면 새로운 객체를 만들지 않아도
  바로 현 시점의 날짜 값을 얻어낼 수 있음

let myDate = new Date();

console.log(Date.now() === myDate.getTime()); // true

/* 새로운 객체를 만들어서 getTime 메소드를 호출한 값과 일치

새로운 객체를 만들지 않는다는 점은
일단 우리 눈에 코드 한 줄을 줄일 수 있다는 이점도 있고,
눈에는 드러나지 않지만 코드가 실행될 때 메모리의 부담을 줄여줌

순간순간 당시 시간 값이 필요한 경우 이 메소드를 활용하는 것이
코드의 가독성 뿐만아니라 성능적인 측면에서도 좀 더 유리 */


// Date객체의 형변환
let myDate = new Date(2017, 4, 18);

console.log(typeof myDate);  // object
console.log(String(myDate));
// Thu May 18 2017 00:00:00 GMT+0900 (Korean Standard Time)
console.log(Number(myDate));
// 1495033200000
console.log(Boolean(myDate));  // true


// number 타입으로 변환할 경우
: 이 값은 아무 의미없는 단순한 숫자값이 아니라
getTime() 메소드를 활용한 것과 똑같은 수치의 타임스탬프 값

let myDate = new Date(2017, 4, 18);

console.log(myDate.getTime() === Number(myDate)); // true

=> 다시 말해 Date 객체끼리 바로 사칙 연산도 충분히 가능

let myDate1 = new Date(2017, 4, 18);
let myDate2 = new Date(2017, 4, 19);

let timeDiff = myDate2 - myDate1;
console.log(timeDiff); // 86400000 (ms)
console.log(timeDiff / 1000); // 86400 (sec)
console.log(timeDiff / 1000 / 60) // 1440 (min)
console.log(timeDiff / 1000 / 60 / 60) // 24 (hour)
console.log(timeDiff / 1000 / 60 / 60 / 24) // 1 (date)


// 날짜를 표현하는 문자열 (YYYY-MM-DDThh:mm:ss형식 말고도 다양한)

let date1 = new Date('12/15/1999 05:25:30');
let date2 = new Date('December 15, 1999 05:25:30');
let date3 = new Date('Dec 15 1999 05:25:30');

/* 하지만 이런 방식을 사용하다보면
브라우저나, 컴퓨터를 사용하는 위치의 시간대에 따라
서로 다른 결과 값이 나올 수도 있기 때문에

적어도 IETF 호환 RFC 2822 타임스탬프와
ISO8601의 한 버전의 형식을 준수하는 문자열로 Date객체를 생성하는 것을 권장 */


* Date 앞에 new를 쓰는 이유
: Date는 생성자 함수가 존재하는 내장 객체

// 생성자 함수 Date
1. Date() 함수로 호출할 경우
   new Date().toString()과 동일하게
   현재 날짜와 시간을 나타내는 문자열 반환

2. new Date() 생성자로 호출할 경우
   새로운 Date 객체를 반환


// 출력값
console.log(typeof Date(2020,01,01));  // 'string'   
console.log(typeof new Date(2020, 01, 01));  // 'object'

/* new 키워드가 없는 Date() 함수는 인수를 무시하며,
현재 날짜 및 시간을 나타내는 문자열을 반환

new 키워드를 사용한 new Date()는 Date 타입인 새로운 객체를 생성 */