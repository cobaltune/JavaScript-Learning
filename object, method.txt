

// 객체 (object)
: 여러 가지 값을 한 번에 저장하고 싶다면 객체를 사용
  (연관성이 있는 여러 함수들을 하나로 묶고 싶은 경우)

// 메소드 (method)
: 객체의 프로퍼티에는 어떤 자료형이든 저장할 수가 있기 때문에
  프로퍼티 값으로 함수를 넣어주면 되는 것

  이런 함수를 객체의 메소드라고 부름


객체 = {
  메소드 이름: 함수() {
      // 콘텐츠
  }
};

객체.메소드 이름()

ex )
let greetings = {
  sayHello: function () {
    console.log ('Hello!);
  },
  sayHi: function () {
    console.log ('Hi!');
  },
  sayBye: function () {
    console.log ('Bye!');
  }
};

/* function 키워드 다음에 함수 이름 없이
    바로 소괄호와 중괄호를 열어서 함수를 정의
    함수 이름은 프로퍼티 네임이 대신 해주기 때문 */


점 표기법 (objectName.propertyName)
: greetings.sayHello();

// 파라미터가 필요한 경우 파라미터를 작성하고
  sayHello: function (name) {

    // 파라미터를 활용
    console.log (`Hello ${name}!`);
  },

// 메소드를 호출할 때 파라미터로 값을 전달
  : greetings.sayHello('codeit');
 

대괄호 표기법 (objectName['propertyName'])

// 대괄호 표기법으로 프로퍼티에 먼저 접근한 다음
// 소괄호를 열어서 메소드를 호출
: greetings['sayHello']('codeit');


* 그냥 함수를 사용해도 될 텐데
  메소드를 만들어서 사용하는 이유

: 메소드는 어떤 객체의 고유한 동작으로서
  함수에 의미를 부여할 수 있기 때문


let rectAngle = {
  width: 30,
  height: 50,
  getArea: function () {
    return rectAngle.width * rectAngle.height;
  }
}

let triAngle = {
  width: 15,
  height: 40,
  getArea: function () {
    return triAngle.width * triAngle.height / 2;
  }
}

/* 똑같은 넓이를 구하는 getArea 함수지만
어떤 객체의 메소드인지에 따라서
그 객체에 맞는 동작을 할 때 메소드를 사용

만약 일반적인 함수를 정의해야 했다면
함수 이름이 중복되지 않도록 신경 써서 두 함수를 정의해야 하기도 하고

아니면 하나의 함수를 만든다고 하더라도
상황에 따라 다르게끔 함수 내부를 조금 복잡하게 고민해야 함

메소드를 활용하면
- 다른 함수의 이름 중복을 피할 수도 있고
- 좀 더 이 객체에 집중해서 함수의 동작 부분을 작성할 수 있음
- 사용할 때도 이 객체의 고유한 동작으로 구분할 수 있기 때문에
  좀 더 의미있는 코드로 활용이 가능한 장점이 있음 */
