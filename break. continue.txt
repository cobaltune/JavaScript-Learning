
break문
: break; (종료)

break를 반복문 (+ swith) 에서 활용하면
반복문에 조건 부분과 상관없이
반복이 실행되는 도중에 빠져나갈 수 있다.

= 해당 루프를 빠져나온다.
= 바로 다음 루프로 건너뛴다.  라고 생각하면 이해가 쉬움



continue문
: continue; (동작 부분을 한번 건너뜀)

continue 키워드는
반복문 안의 반복 작업을 멈추고
반복문의 처음으로 돌아가 다음 반복 작업을 진행한다.

// ex)
for (let i = 1; i <= 10; i++) {
  if (i % 2 === 0) {
    continue;
  }
  console.log(i);
}

이렇게 console.log 전에 continue 가 진행되면
console.log도 넘어가서

짝수는 무시되고, 홀수일 때만 console.log (i)만 실행

따라서,
1
3
5
7
9 만 출력됨


+) while도 마찬가지

let i = 1;

while (i <= 10) {
  if (i % 2 ===0) {
    i++;
    continue;
  }
  console.log (i);
  i++;
}


코드 해석
: continue가 실행되기 전에 i++;이 돼서
1 % 2 === 0
2 % 2 === 0 일 때 continue; 가 실행 돼가지고
다시 if 문에 조건 부분으로 진행

그래서 3 % 2 === 0 이렇게 돼서
console.log 하고 ... 여기에서
i++; 해줘서 4 % 2 === 0 이렇게 진행

+) 2로 나누는 건
   0 아니면 1 밖에 없음


while문은 for문과 다르게
추가 동작 부분이 없어서

continue가 실행돼서 동작 부분을 건너뛰게 되면

바로 while (조건 부분)으로 넘어가게 돼서
continue; 전에 i를 증가시켜줬음

/* 만약 continue; 전에 i++;을 쓰지 않으면
i가 2인 채로 무한히 반복하는 코드가 됨*/


+) while문은 조건 부분을
   성공해도 i++;
   실패해도 i++;


+) 하단에 있는 i++; 코드가
   있어도 그만 없어도 그만 > 똑같이 짝수 값만 출력

   코드를 더 간결하게 쓰려면
   console.log(i); 밑에 i++;를 빼도 됨

   위 예시는 문제를 위해서 일부러 넣은 것