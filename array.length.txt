
Length (property)
: 배열이 가지고 있는 요소의 총 개수를 표시해주는 프로퍼티

⇒ 배열 안에 몇 객의 데이터가 들어 있는지 쉽게 파악 가능

// 어떤 그룹 멤버들의 닉네임을 모아둔 배열
let members = [
  '쿤갈레', 'zerrad66', '우리생각해써', '흙토끼', 'End Miracle'];

console.log (members.length);  // 점 표기법
console.log (members['length']);  // 대괄호 표기법

// 출력값
5


// 배열에 요소를 추가하거나, 수정하는 방법

- 존재하지 않는 요소에 접근해서
  새로운 값을 할당해 주게 되면 배열에 요소가 추가되고

- 이미 존재하는 요소에 접근해서 값을 할당하게 되면
  요소의 값이 수정되는 방식

존재하지 않는 요소에 접근하려고 하면 에러가 아니라 undefined가 출력

ex )
members[5] = 'NiceCodeit'
console.log (members[5]);

// 출력값
NiceCodeit


** 인덱스의 순서를 뛰어넘으면서 추가하게 되면
  undefined 값이 들어간 요소가 자동으로 생성


ex : 콘솔창에서 )
members
(7) ["쿤갈레", "zerrad66", "우리생각해써", "흙토끼",
"End Miracle", empty, "NiceCodeit"]

가운데 empty라고 해서 비어있다는 사실을 알려줌

5번 인덱스의 값이 비어있긴 하지만
하나의 요소로 생성이 돼서 members의 lenght도 7이 된 걸 확인할 수 있음


// 요소의 수정
members[3] = '달토끼'
console.log (members);

// 출력값
(5) ["쿤갈레", "zerrad66", "우리생각해써", "달토끼", "End Miracle"]


이렇게 이미 존재하는 요소에 접근을 해서
출력을 해보면 3번 인덱스에 있는 값이 수정된 걸 확인할 수 있음


// 요소의 삭제
// 객체에서는 delete 연산자를 활용
console.log (members);
delete members[4];
console.log (members);

// 출력값
(5) ["쿤갈레", "zerrad66", "우리생각해써", "흙토끼", empty]

값 자체는 지워진 거 같은데 요소가 계속 empty로 남아 있고
length도 5로 계속 유지되고 있음
= 이건 사실상 완벽하게 요소가 삭제되었다고 보기 힘듦

배열의 요소를 완벽하게 삭제하려면
배열이 가지고 있는 메소드를 활용해야 함